#!/usr/bin/env python

import rospy

from std_msgs.msg import Bool, Float32
from roboteq_msgs.msg import Feedback
from functools import partial

FR = 0
FL = 1
RR = 2
RL = 3

class FanControl:
    def __init__(self):
        rospy.init_node('fan_control')
        
        self.safe_motor_temp = rospy.get_param('safe_motor_temp', 60)
        self.safe_ch_temp = rospy.get_param('safe_ch_temp', 50)
        self.safe_body_temp = rospy.get_param('safe_body_temp', 50)
        self.hyst_size = rospy.get_param('hyst_size', 10)

        self.fan_state = False

        self.body_temp = 0
        self.channel_temp = [0,0,0,0]
        self.motor_temp = [0,0,0,0]

        # Timing
        hz = rospy.get_param('~hz', 20)
        self.rate = rospy.Rate(hz)

        # Publishers & subscribers
        self.cmd_fan = rospy.Publisher('mcu/fan', Bool)
        rospy.Subscriber('mcu/body_temp', Float32, self.HandleBodyTempStatus)
        rospy.Subscriber('motors/front_left/feedback', Feedback, partial(self.HandleMotorFeedback, FL))
        rospy.Subscriber('motors/front_right/feedback', Feedback, partial(self.HandleMotorFeedback, FR))
        rospy.Subscriber('motors/rear_left/feedback', Feedback, partial(self.HandleMotorFeedback, RL))
        rospy.Subscriber('motors/rear_right/feedback', Feedback, partial(self.HandleMotorFeedback, RR))

        while not rospy.is_shutdown():
            """ Main state machine loop """
            self.check_temps()
            self.cmd_fan.publish(int(self.fan_state))
            self.rate.sleep()

    def HandleBodyTempStatus(self, data):
        self.body_temp = data.data

    def HandleMotorFeedback(self, motor_num, data):
        self.motor_temp[motor_num] = data.motor_temperature
        self.channel_temp[motor_num]  = data.channel_temperature
        
    def check_temps(self):
        motor_safe = ic_safe = ch_safe = body_safe = 0

        #TODO:Is there a cleaner way of doing this check?
        for i in range(4):
            #Check if any temps are above safe temp 
            if (self.motor_temp[i] > self.safe_motor_temp ):
               self.fan_state = True
               break
           
            if (self.channel_temp[i] > self.safe_ch_temp ):
               self.fan_state = True
               break

            #Count the number of motors, ic's and channels that are safe
            if (self.motor_temp[i] < (self.safe_motor_temp - self.hyst_size)):
                motor_safe = motor_safe + 1 

            if (self.channel_temp[i] < (self.safe_ch_temp - self.hyst_size)):
                ch_safe = ch_safe + 1  
        
        # Body temperature check
        if (self.body_temp > self.safe_body_temp):
            self.fan_state = True
        if (self.body_temp < (self.safe_body_temp - self.hyst_size)):
            body_safe = body_safe + 1

        #if all motors,ics and channels are fine, turn off fan
        if (motor_safe > 3 and ic_safe > 3 and ch_safe > 3 and body_safe > 0):
            self.fan_state = False

if __name__ == "__main__": 
    FanControl()
