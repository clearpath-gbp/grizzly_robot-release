#!/usr/bin/env python

import os
import subprocess
import robot_upstart

from catkin.find_in_workspaces import find_in_workspaces

class AddNetworkDepend(robot_upstart.providers.Systemd):
    def post_install(self):
        lines = "After=network-online.target\\nWants=network-online.target"
        cmd = "sudo sed -i 's/.*Unit.*/&\\n" + lines + "/' " + os.path.join(self.root, "lib/systemd/system", self.job.name + ".service")
        subprocess.call(cmd, shell=True)
        print("** To complete installation please run the following command:")
        print(" sudo systemctl daemon-reload" +
              " && sudo systemctl start " + self.job.name)

main_job = robot_upstart.Job(workspace_setup=os.environ['ROBOT_SETUP'])
main_job.add(package="grizzly_base", filename="launch/base.launch")
main_job.add(package="grizzly_bringup", filename="launch/accessories.launch")
main_job.install(Provider=AddNetworkDepend)


class GrizzlyExtras(robot_upstart.providers.Systemd):
    def generate_install(self):
        with open(find_in_workspaces(project="grizzly_bringup", path="can_up.sh")[0]) as f:
            can_conf_contents = f.read()
        with open(find_in_workspaces(project="grizzly_bringup", path="systemd_job.conf")[0]) as f:
            systemd_job = f.read()
        self._set_job_path()

        self.installation_files[os.path.join(self.root, "lib/systemd/system", self.job.name + ".service")] = {
            "content": systemd_job, "mode": 0o644}
        self.installation_files[os.path.join(self.root, "etc/systemd/system/multi-user.target.wants",
                                             self.job.name + ".service")] = {
            "symlink": os.path.join(self.root, "lib/systemd/system/", self.job.name + ".service")}
        self.installation_files[os.path.join(self.root, "usr/sbin", "grizzly_can.sh")] = {
            "content": can_conf_contents, "mode": 0o755}

        self._load_installed_files_set()
        self.installed_files_set.update(self.installation_files.keys())

        # Remove the job directory. This will fail if it is not empty, and notify the user.
        self.installed_files_set.add(self.job.job_path)

        # Remove the annotation file itself.
        self.installed_files_set.add(self.installed_files_set_location)

        self.installation_files[self.installed_files_set_location] = {
            "content": "\n".join(self.installed_files_set)}

        return self.installation_files


other_job = robot_upstart.Job(name="grizzly-can")
other_job.install(Provider=GrizzlyExtras)
